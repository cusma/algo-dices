#pragma version 8
intcblock 0 1 6 2
bytecblock 0x626561636f6e5f6170705f6964 0x72616e646f6d6e6573735f726f756e64 0x068101
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0xff844625 // "book_dices_roll(uint64)void"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x4803eba1 // "roll_dices(application,uint8[])uint8[]"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0x2178a540 // "create(application)void"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub create_5
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 0
txna ApplicationArgs 2
store 1
load 0
load 1
callsub rolldices_4
store 2
pushbytes 0x151f7c75 // 0x151f7c75
load 2
concat
log
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
callsub bookdicesroll_3
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_1 // OptIn
==
bnz main_l10
err
main_l10:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_0
intc_1 // 1
return

// opt_in
optin_0:
txn Sender
bytec_1 // "randomness_round"
intc_0 // 0
app_local_put
retsub

// get_randomness
getrandomness_1:
txn Sender
bytec_1 // "randomness_round"
app_local_get
store 16
txn Sender
store 17
load 17
len
itob
extract 6 0
load 17
concat
store 17
itxn_begin
intc_2 // appl
itxn_field TypeEnum
bytec_0 // "beacon_app_id"
app_global_get
itxn_field ApplicationID
pushbytes 0x47c20c23 // "must_get(uint64,byte[])byte[]"
itxn_field ApplicationArgs
load 16
itob
itxn_field ApplicationArgs
load 17
itxn_field ApplicationArgs
intc_0 // 0
itxn_field Fee
itxn_submit
itxn LastLog
extract 4 0
retsub

// is_valid_faces
isvalidfaces_2:
store 18
load 18
intc_3 // 2
==
load 18
pushint 4 // 4
==
||
load 18
intc_2 // 6
==
||
load 18
pushint 8 // 8
==
||
load 18
pushint 10 // 10
==
||
load 18
pushint 12 // 12
==
||
load 18
pushint 20 // 20
==
||
retsub

// book_dices_roll
bookdicesroll_3:
store 15
load 15
global Round
>
// Dices roll round must be in the future.
assert
txn Sender
bytec_1 // "randomness_round"
load 15
app_local_put
retsub

// roll_dices
rolldices_4:
store 4
store 3
intc_0 // 0
store 12
rolldices_4_l1:
load 12
pushint 1000 // 1000
global MinTxnFee
/
<
bnz rolldices_4_l8
load 3
txnas Applications
bytec_0 // "beacon_app_id"
app_global_get
==
// Wrong Randomness Beacon App ID.
assert
load 4
intc_0 // 0
extract_uint16
store 10
load 10
pushint 14 // 14
<=
// Too many dices. Max dices per roll: 14.
assert
intc_1 // 1
store 7
intc_0 // 0
store 5
rolldices_4_l3:
load 5
load 4
intc_0 // 0
extract_uint16
store 10
load 10
<
bnz rolldices_4_l7
load 7
itob
store 8
callsub getrandomness_1
load 8
b%
store 8
load 8
btoi
store 7
load 4
intc_0 // 0
extract_uint16
store 10
load 10
store 13
load 13
pushint 65536 // 65536
<
assert
load 13
itob
extract 6 0
store 9
intc_0 // 0
store 5
rolldices_4_l5:
load 5
load 4
intc_0 // 0
extract_uint16
store 10
load 10
<
bz rolldices_4_l9
load 4
intc_1 // 1
load 5
*
intc_3 // 2
+
getbyte
store 11
load 11
store 6
load 7
load 6
%
intc_1 // 1
+
store 14
load 14
pushint 256 // 256
<
assert
load 9
pushbytes 0x00 // 0x00
intc_0 // 0
load 14
setbyte
concat
store 9
load 7
load 6
/
store 7
load 5
intc_1 // 1
+
store 5
b rolldices_4_l5
rolldices_4_l7:
load 4
intc_1 // 1
load 5
*
intc_3 // 2
+
getbyte
store 11
load 11
store 6
load 6
callsub isvalidfaces_2
// Number of faces must be equal to real ideal dices.
assert
load 7
load 6
*
store 7
load 5
intc_1 // 1
+
store 5
b rolldices_4_l3
rolldices_4_l8:
itxn_begin
intc_2 // appl
itxn_field TypeEnum
intc_0 // 0
itxn_field Fee
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec_2 // 0x068101
itxn_field ApprovalProgram
bytec_2 // 0x068101
itxn_field ClearStateProgram
itxn_submit
load 12
intc_1 // 1
+
store 12
b rolldices_4_l1
rolldices_4_l9:
txn Sender
bytec_1 // "randomness_round"
intc_0 // 0
app_local_put
load 9
retsub

// create
create_5:
store 19
txn GlobalNumUint
intc_1 // 1
==
// Wrong Global State Schema. Must be: 1 uint.
assert
txn GlobalNumByteSlice
intc_0 // 0
==
// Wrong Global State Schema. Must be: 0 byte slices.
assert
txn LocalNumUint
intc_1 // 1
==
// Wrong Local State Schema. Must be: 1 uint.
assert
txn LocalNumByteSlice
intc_0 // 0
==
// Wrong Local State Schema. Must be: 0 byte slices.
assert
intc_0 // 0
bytec_0 // "beacon_app_id"
app_global_get_ex
store 21
store 20
load 21
!
// AlgoDices App already created!
assert
load 19
txnas Applications
pushint 110096026 // 110096026
==
load 19
txnas Applications
pushint 947957720 // 947957720
==
||
// Wrong Randomness Beacon App ID. Must be either: 110096026 (TestNet) or 947957720 (MainNet).
assert
intc_0 // 0
bytec_0 // "beacon_app_id"
app_global_get_ex
store 23
store 22
load 23
!
assert
bytec_0 // "beacon_app_id"
load 19
txnas Applications
app_global_put
retsub
